class Solution {
public:
    bool isValidBST(TreeNode* root)
    {           
         return isValidBST(root, NULL, NULL);
}

bool isValidBST(TreeNode* root, TreeNode* minNode, TreeNode* maxNode) 
{
    if(!root) 
     return true;   // it returns true for chile of leaf
    if(minNode && root->val <= minNode->val || maxNode && root->val >= maxNode->val) // it is checking for condition of bst. So either leaf or check condition.
        return false;  
    return isValidBST(root->left, minNode, root) && isValidBST(root->right, root, maxNode);
   }    
};

// we are using a,b,c where b,c does check for limit of a
// we do change position of minNode if LR case arise and max when RL condition occurs.