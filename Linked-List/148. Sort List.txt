class Solution {
public:    
    void mergesorting (ListNode** head) 
    {
       ListNode* curr = *head ;    // make a current pointer 
       ListNode* first ;           // for the first half
       ListNode* second ;          // for the second half
        
       if(curr == NULL || curr->next == NULL)
           return;
        
       mid(curr, &first,&second) ;   // function used to find mid in b/w the
        
       mergesorting(&first) ; 
        
       mergesorting(&second) ;
        
       *head = merge(first,second); // and at last merge oyr first half and second half
     }    
    
    void mid(ListNode* curr, ListNode** first, ListNode** second)
    {
       ListNode* slow = curr ; 
       ListNode* fast = curr -> next ; 
       
       while(fast != NULL)
       {
          fast = fast -> next;
          if(fast != NULL)
          {
             fast = fast -> next;
             slow = slow -> next;
           }
        }        
        
        *first = curr ;   // after this assign curr to first
        *second = slow -> next ; // second to slow next
        slow -> next = NULL ; // and put slow next to null to end connection with right
    }
    
    // function used to merge first and second pointer
    ListNode* merge(ListNode* first, ListNode* second)
    {
        ListNode* answer = NULL; // define answer to null
        
        if(first == NULL) // if first is null, then what to merge...nothing       
            return second; // return second
       
        
        if(second == NULL) // if second is null, then what to merge...nothing      
            return first; // return first      
        
        // if value of first is less than value of second,then give answer to first
        if(first -> val <= second -> val) 
        {
           answer = first;
           answer -> next = merge(first -> next, second); // and again call merge for answer's next
        }
        else // else give answer to second
        {
           answer = second;
           answer->next = merge(first, second -> next); // and again call merge for answer's next
        }        
        return answer;      // finally return answer
    }
        
    ListNode* sortList(ListNode* head)
    {
        mergesorting(&head) ;    // note- head is itself a pointer       
        return head;
    }
};

// this is mergesort - O.nlogn, space-O.
// it canbe done in 