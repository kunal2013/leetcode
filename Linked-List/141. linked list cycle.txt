class Solution {
public:
    bool hasCycle(ListNode *head) {
            if (head == NULL)
                    return 0 ;
            ListNode * temp1 ;
            ListNode * temp2 ;
            temp1 = temp2 =  head ;
            while (temp2->next && temp2->next->next )         
            {                 
              temp1=temp1->next ;
              temp2=temp2->next->next ;
              if (temp1 == temp2)
                    return 1 ;
            }
           return 0 ;  
    }
};

// problem i face in putting condition case in while loop. Actualy we must check if temp2->next exist or not.
// it is helpful for odd number linked list.
// One more way is not check head for NULL in line-12 but to check that in while
// while (temp2 && temp2->next)
