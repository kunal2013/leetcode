class Solution 
{
public:
        
    double median (vector<int> a, vector<int>b)
    {
      int m = a.size() ; 
      int n = b.size() ;
      if(m>n)
            return median(b,a); 
      int l=0, r=m ;
      while(l<=r)
      {
            int x = (l+r)/2 ;
            int y = (m+n+1)/2 - x ;   // 1 is for odd, so y will hold 1 more element then x
            int max_x = (x==0) ? INT_MIN : a[x-1] ;      // it is right of x
            int min_x = (x==m) ? INT_MAX : a[x] ;
            int max_y = (y==0) ? INT_MIN : b[y-1] ;        // it is right of y
            int min_y= (y==n) ? INT_MAX : b[y] ;
              
            if(max_x <= min_y && max_y <= min_x)
            {
                if((m+n)%2==0)
                   return (double)(max(max_x,max_y) + min(min_x,min_y))/2 ;   //one of max_x,max_y is int_mon
                else
                   return (double)(max(max_x,max_y));
            }
            else
            {
                if(max_x > min_y)
                    r= x-1;
                else
                    l= x+1 ;    
            }        
         }
            return -1.0;
     }
    
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
           double ans ;
           return ans = median (nums1,nums2) ;                    
    }
};

/* point is our median should be greater then left and smaller then right.
   also in right and left of it should be equal no. of elements.  */ 

// for even size array we will take average of middle two element.